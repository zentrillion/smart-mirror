{"remainingRequest":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\angular-weather-widget\\weather.container.js","dependencies":[{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\angular-weather-widget\\weather.container.js","mtime":1500906519000},{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528636607653},{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, Renderer2 } from '@angular/core';\nimport { WeatherApiService } from './services/api/weather.api.service';\nimport { WeatherLayout } from './weather.interfaces';\nvar WeatherContainer = /*@__PURE__*/ (function () {\n    function WeatherContainer(weatherApi, changeDetectorRef, renderer, element) {\n        this.weatherApi = weatherApi;\n        this.changeDetectorRef = changeDetectorRef;\n        this.renderer = renderer;\n        this.element = element;\n        this.width = 'auto';\n        this.height = 'auto';\n        this.isWideLayout = false;\n    }\n    Object.defineProperty(WeatherContainer.prototype, \"settings\", {\n        get: function () {\n            return this._settings;\n        },\n        set: function (value) {\n            if (!value) {\n                return;\n            }\n            this._settings = value;\n            this.background = this._settings.backgroundColor || 'white';\n            this.color = this._settings.color || 'black';\n            this.width = this._settings.width;\n            this.height = this._settings.height;\n            if (this.weatherApi.apiConfig.name && this.weatherApi.apiConfig.key) {\n                this.getWeather();\n            }\n            if (this._settings.layout) {\n                this.isWideLayout = this._settings.layout === WeatherLayout.WIDE;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WeatherContainer.prototype.ngOnDestroy = function () {\n        if (this.subscriptionCurrentWeather) {\n            this.subscriptionCurrentWeather.unsubscribe();\n        }\n        if (this.subscriptionForecast) {\n            this.subscriptionForecast.unsubscribe();\n        }\n    };\n    WeatherContainer.prototype.onMouseEnter = function () {\n        this.renderer.addClass(this.element.nativeElement, 'active');\n        this.isMouseOn = true;\n    };\n    WeatherContainer.prototype.onMouseLeave = function () {\n        this.renderer.removeClass(this.element.nativeElement, 'active');\n        this.isMouseOn = false;\n    };\n    WeatherContainer.prototype.getWeather = function () {\n        var _this = this;\n        if (this.subscriptionCurrentWeather) {\n            this.subscriptionCurrentWeather.unsubscribe();\n        }\n        if (this.subscriptionForecast) {\n            this.subscriptionForecast.unsubscribe();\n        }\n        this.currentWeather$ = this.currentWeatherCall();\n        this.forecast$ = this.forecastCall();\n        this.subscriptionCurrentWeather = this.currentWeather$.subscribe(function (data) {\n            _this.currentWeather = data;\n            _this.changeDetectorRef.markForCheck();\n        });\n        this.subscriptionForecast = this.forecast$.subscribe(function (data) {\n            _this.forecast = data;\n            _this.changeDetectorRef.markForCheck();\n        });\n    };\n    WeatherContainer.prototype.currentWeatherCall = function () {\n        var params = Object.assign({}, this.settings.location, { units: this.settings.scale }, { lang: this.settings.language });\n        return this.weatherApi.currentWeather(params);\n    };\n    WeatherContainer.prototype.forecastCall = function () {\n        var params = Object.assign({}, this.settings.location, { units: this.settings.scale }, { lang: this.settings.language });\n        return this.weatherApi.forecast(params);\n    };\n    return WeatherContainer;\n}());\nexport { WeatherContainer };\n//# sourceMappingURL=weather.container.js.map\n",null]}