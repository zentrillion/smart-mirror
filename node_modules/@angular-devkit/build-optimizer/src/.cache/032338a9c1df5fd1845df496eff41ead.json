{"remainingRequest":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\angular-weather-widget\\services\\weather-helpers.service.js","dependencies":[{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\angular-weather-widget\\services\\weather-helpers.service.js","mtime":1500906519000},{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528636607653},{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nvar WeatherHelpersService = /*@__PURE__*/ (function () {\n    function WeatherHelpersService() {\n    }\n    WeatherHelpersService.prototype.groupForecastsByDay = function (list) {\n        var map = {};\n        var result = [];\n        list.forEach(function (el) {\n            var day = el.data.getUTCDate();\n            if (!map[day]) {\n                map[day] = [el];\n            }\n            else {\n                map[day].push(el);\n            }\n        });\n        result = Object.keys(map).map(function (key) { return map[key]; });\n        return result;\n    };\n    // Fixme: This function generates wrong icon for average day weather.\n    // Weather icon is taken from first day measurement\n    WeatherHelpersService.prototype.reduceToAveragePerDay = function (list) {\n        return list.reduce(function (prev, curr) {\n            if (curr && !curr.data) {\n                prev.push(curr);\n                return prev;\n            }\n            var lastElement = function () {\n                return prev[prev.length - 1];\n            };\n            var prevDay = lastElement()\n                ? prev[prev.length - 1].data.getDay()\n                : null;\n            var currDay = curr.data.getDay();\n            if (currDay === prevDay) {\n                var result = lastElement();\n                result.temp = (result.temp + curr.temp) / 2;\n                if (result.wind && curr.wind) {\n                    result.wind = {\n                        speed: (result.wind.speed + curr.wind.speed) / 2,\n                        deg: (result.wind.deg + curr.wind.deg) / 2\n                    };\n                }\n                if (result.humidity && curr.humidity) {\n                    result.humidity = (result.humidity + curr.humidity) / 2;\n                }\n                if (result.pressure && curr.pressure) {\n                    result.pressure = (result.pressure + curr.pressure) / 2;\n                }\n                prev[prev.length - 1] = result;\n                return prev;\n            }\n            else {\n                prev.push(curr);\n                return prev;\n            }\n        }, []);\n    };\n    WeatherHelpersService.prototype.mapForecastToCharts = function (forecast, borderColor) {\n        if (borderColor === void 0) {\n            borderColor = '#aaa';\n        }\n        return forecast.reduce(function (prev, curr) {\n            if (prev.labels) {\n                prev.labels.push(curr.data.toISOString());\n            }\n            if (prev.datasets && prev.datasets[0] && prev.datasets[0].data) {\n                var data = prev.datasets[0].data;\n                data.push(curr.temp);\n            }\n            return prev;\n        }, {\n            labels: [],\n            datasets: [\n                {\n                    data: [],\n                    backgroundColor: ['rgba(0, 0, 0, 0.1)'],\n                    borderColor: [borderColor],\n                    borderWidth: 1\n                }\n            ]\n        });\n    };\n    WeatherHelpersService.prototype.hexToRgbA = function (hex, opacity) {\n        var c;\n        if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n            c = hex.substring(1).split('');\n            if (c.length === 3) {\n                c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n            }\n            c = '0x' + c.join('');\n            return \"rgba(\" + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + \",\" + opacity + \")\";\n        }\n    };\n    return WeatherHelpersService;\n}());\nexport { WeatherHelpersService };\n//# sourceMappingURL=weather-helpers.service.js.map\n",null]}