{"remainingRequest":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\angular-weather-widget\\services\\poling.service.js","dependencies":[{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\angular-weather-widget\\services\\poling.service.js","mtime":1500906519000},{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528636607653},{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Injectable, NgZone } from '@angular/core';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/multicast';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nvar PoolingService = /*@__PURE__*/ (function () {\n    function PoolingService(zone) {\n        this.zone = zone;\n    }\n    // NOTE: Running the interval outside Angular ensures that e2e tests will not hang.\n    PoolingService.prototype.execute = function (operation, frequency) {\n        var _this = this;\n        if (frequency === void 0) {\n            frequency = 1000;\n        }\n        var subject = new Subject();\n        var source = Observable.create(function (observer) {\n            var sub;\n            _this.zone.runOutsideAngular(function () {\n                var zone = _this.zone;\n                sub = Observable.interval(frequency).mergeMap(operation).subscribe({\n                    next: function (result) {\n                        zone.run(function () {\n                            observer.next(result);\n                        });\n                    },\n                    error: function (err) {\n                        zone.run(function () {\n                            observer.error(err);\n                        });\n                    }\n                });\n            });\n            return function () {\n                if (sub) {\n                    sub.unsubscribe();\n                }\n            };\n        });\n        return source.multicast(subject).refCount().merge(operation());\n    };\n    return PoolingService;\n}());\nexport { PoolingService };\n//# sourceMappingURL=poling.service.js.map\n",null]}