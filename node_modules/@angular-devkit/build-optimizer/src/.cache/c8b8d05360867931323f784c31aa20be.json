{"remainingRequest":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\angular-weather-widget\\services\\api\\weather.api.service.js","dependencies":[{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\angular-weather-widget\\services\\api\\weather.api.service.js","mtime":1500906519000},{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528636607653},{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Inject, Injectable } from '@angular/core';\nimport { Headers, Http, RequestOptions, URLSearchParams } from '@angular/http';\nimport { PoolingService } from '../poling.service';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/first';\nvar WeatherApiService = /*@__PURE__*/ (function () {\n    function WeatherApiService(http, poolingService, apiConfig) {\n        this.http = http;\n        this.poolingService = poolingService;\n        this.apiConfig = apiConfig;\n        this.poollingInterval = 60000 * 60;\n    }\n    WeatherApiService.prototype.currentWeather = function (queryParams) {\n        return this.callApi(queryParams, '/weather').map(this.mapCurrentWeatherResponse.bind(this));\n    };\n    WeatherApiService.prototype.forecast = function (queryParams) {\n        return this.callApi(queryParams, '/forecast').map(this.mapForecastResponse.bind(this));\n    };\n    WeatherApiService.prototype.callApi = function (queryParams, endpoint) {\n        var params = this.mapQueryParams(queryParams);\n        var requestOptions = this.getRequestOptions(params);\n        var apiCall = this.http\n            .get(this.apiConfig.baseUrl + \"/\" + endpoint, requestOptions)\n            .map(function (resp) { return resp.json(); })\n            .filter(function (el) { return !!el; });\n        return this.wrapWithPoll(apiCall);\n    };\n    WeatherApiService.prototype.setTokenKey = function () {\n        // Implement it in child service\n        return '';\n    };\n    WeatherApiService.prototype.mapQueryParams = function (params) {\n        // Implement it in child service\n        return;\n    };\n    WeatherApiService.prototype.mapCurrentWeatherResponse = function (response) {\n        // Implement it in child service\n        return {};\n    };\n    WeatherApiService.prototype.mapForecastResponse = function (response) {\n        // Implement it in child service\n        return [];\n    };\n    WeatherApiService.prototype.mapResponseToIconUrl = function (response) {\n        return '';\n    };\n    WeatherApiService.prototype.mapResponseToIconClass = function (response) {\n        return '';\n    };\n    WeatherApiService.prototype.wrapWithPoll = function (apiCall) {\n        return this.poolingService.execute(function () { return apiCall; }, this.poollingInterval);\n    };\n    WeatherApiService.prototype.getRequestOptions = function (queryParams) {\n        return new RequestOptions({\n            headers: new Headers(),\n            params: this.getQueryParams(queryParams)\n        });\n    };\n    WeatherApiService.prototype.getQueryParams = function (obj) {\n        var queryParams = new URLSearchParams();\n        queryParams.set(this.setTokenKey(), this.apiConfig.key);\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                queryParams.set(key.toString(), obj[key]);\n            }\n        }\n        return queryParams;\n    };\n    return WeatherApiService;\n}());\nexport { WeatherApiService };\nvar WeatherApiConfig = /*@__PURE__*/ (function () {\n    function WeatherApiConfig() {\n        this.name = WeatherApiName.OPEN_WEATHER_MAP;\n        this.key = 'provide secret key';\n        this.baseUrl = 'http://api.openweathermap.org/data/2.5';\n    }\n    return WeatherApiConfig;\n}());\nexport { WeatherApiConfig };\nexport var WeatherApiName = /*@__PURE__*/ (function (WeatherApiName) {\n    WeatherApiName[WeatherApiName[\"OPEN_WEATHER_MAP\"] = 'Open Weather Map'] = \"OPEN_WEATHER_MAP\";\n    return WeatherApiName;\n})({});\n//# sourceMappingURL=weather.api.service.js.map\n",null]}