{"remainingRequest":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\angular-weather-widget\\services\\api\\open-weather-map\\open-weather-map.api.service.js","dependencies":[{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\angular-weather-widget\\services\\api\\open-weather-map\\open-weather-map.api.service.js","mtime":1500906519000},{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528636607653},{"path":"C:\\Users\\Franz Eder\\Documents\\GitHub\\smart-mirror\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { TemperatureScale } from '../../../components/weather-current-temperature/current-temperature.component';\nimport { PoolingService } from '../../poling.service';\nimport { WeatherApiConfig, WeatherApiService } from '../weather.api.service';\nimport { iconCodes } from './open-weather-map-to-weather-icons';\nvar OpenWeatherMapApiService = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OpenWeatherMapApiService, _super);\n    function OpenWeatherMapApiService(http, poolingService, apiConfig) {\n        var _this = _super.call(this, http, poolingService, apiConfig) || this;\n        _this.http = http;\n        _this.poolingService = poolingService;\n        _this.apiConfig = apiConfig;\n        _this.iconCodes = iconCodes;\n        return _this;\n    }\n    OpenWeatherMapApiService.prototype.mapQueryParams = function (params) {\n        var mapped = {\n            id: params.cityId,\n            q: params.cityName,\n            lat: params.latLng ? params.latLng.lat : undefined,\n            lon: params.latLng ? params.latLng.lng : undefined,\n            zip: params.zipCode,\n            units: params.units ? this.mapUnits(params.units) : undefined,\n            lang: params.lang\n        };\n        return mapped;\n    };\n    OpenWeatherMapApiService.prototype.mapCurrentWeatherResponse = function (response) {\n        if (!response) {\n            return {};\n        }\n        var weather = {\n            temp: response.main.temp,\n            pressure: response.main ? response.main.pressure : undefined,\n            humidity: response.main ? response.main.humidity : undefined,\n            minTemp: response.main && response.main.temp\n                ? response.main.temp_min\n                : undefined,\n            maxTemp: response.main && response.main.temp\n                ? response.main.temp_max\n                : undefined,\n            sunrise: response.sys ? response.sys.sunrise : undefined,\n            sunset: response.sys ? response.sys.sunset : undefined,\n            location: response.name,\n            iconUrl: this.mapResponseToIconUrl(response),\n            iconClass: this.mapResponseToIconClass(response),\n            description: response.weather[0].description,\n            wind: {\n                deg: response.wind.deg,\n                speed: response.wind.speed\n            }\n        };\n        return weather;\n    };\n    OpenWeatherMapApiService.prototype.mapForecastResponse = function (response) {\n        var _this = this;\n        if (!response) {\n            return [];\n        }\n        var city = response.city;\n        return response.list.map(function (el) {\n            var forecast = {\n                temp: el.main.temp,\n                pressure: el.main.pressure,\n                humidity: el.main.humidity,\n                minTemp: el.main.temp_min,\n                maxTemp: el.main.temp_max,\n                location: city.name,\n                iconClass: _this.mapResponseToIconClass(el),\n                description: el.weather[0].description,\n                data: new Date(el.dt * 1000),\n                wind: {\n                    deg: el.wind.deg,\n                    speed: el.wind.speed\n                }\n            };\n            return forecast;\n        });\n    };\n    OpenWeatherMapApiService.prototype.mapResponseToIconUrl = function (response) {\n        return \"http://openweathermap.org/img/w/\" + response.weather[0].icon + \".png\";\n    };\n    OpenWeatherMapApiService.prototype.mapResponseToIconClass = function (response) {\n        var code = response.weather[0].id;\n        var prefix = 'wi wi-';\n        var icon = iconCodes[code].icon;\n        // If we are not in the ranges mentioned above, add a day/night prefix.\n        if (!(code > 699 && code < 800) && !(code > 899 && code < 1000)) {\n            icon = 'day-' + icon;\n        }\n        icon = prefix + icon;\n        return icon;\n    };\n    OpenWeatherMapApiService.prototype.setTokenKey = function () {\n        return 'APPID';\n    };\n    OpenWeatherMapApiService.prototype.mapUnits = function (unit) {\n        switch (unit) {\n            case TemperatureScale.CELCIUS:\n                return 'metric';\n            case TemperatureScale.FAHRENHEIT:\n                return 'imperial';\n            case TemperatureScale.KELVIN:\n                return;\n            default:\n                return 'metric';\n        }\n    };\n    return OpenWeatherMapApiService;\n}(WeatherApiService));\nexport { OpenWeatherMapApiService };\n//# sourceMappingURL=open-weather-map.api.service.js.map\n",null]}