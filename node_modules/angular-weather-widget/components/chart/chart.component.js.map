{"version":3,"sources":["../../../src/components/chart/chart.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,UAAU,EAIX,MAAM,eAAA,CAAgB;AACvB,OAAO,EAA2B,KAAA,EAAM,MAAO,UAAA,CAAW;AAE1D;IAQE,wBAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAE9C,iCAAQ,GAAR;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CACpB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,EACrD;YACE,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CACF,CAAC;IACJ,CAAC;IAED,oCAAW,GAAX,UAAY,OAAsB;QAAlC,iBAQC;QAPC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClC,IAAM,cAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC;YAClD,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ;gBAC3D,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,cAAY,CAAC,QAAQ,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;IACI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,mBAAmB;oBAC7B,MAAM,EAAE,CAAC,2BAA2B,CAAC;iBACtC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;KACnB,EAF6F,CAE7F,CAAC;IACK,6BAAc,GAA2C;QAChE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC5B,CAAC;IACF,qBAAC;CA9CD,AA8CC,IAAA;SA9CY,cAAc","file":"chart.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Input,\n  ElementRef,\n  OnInit,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport { ChartOptions, ChartData, Chart } from 'chart.js';\n\nexport class ChartComponent implements OnInit, OnChanges {\n  chart: any;\n\n  \n  type: 'line' | 'bar' | 'radar' | 'pie' | 'polarArea' | 'bubble' | 'scatter';\n   data: ChartData;\n   options: ChartOptions;\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngOnInit() {\n    this.chart = new Chart(\n      this.elementRef.nativeElement.querySelector('canvas'),\n      {\n        type: this.type,\n        data: this.data,\n        options: this.options\n      }\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.chart && changes['data']) {\n      const currentValue = changes['data'].currentValue;\n      ['datasets', 'labels', 'xLabels', 'yLabels'].forEach(property => {\n        this.chart.data[property] = currentValue[property];\n      });\n      this.chart.update();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'weather-chart',\n  template: '<canvas></canvas>',\n  styles: [':host { display: block; }']\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'type': [{ type: Input },],\n'data': [{ type: Input },],\n'options': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}