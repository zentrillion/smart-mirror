{"version":3,"sources":["../../../src/components/weather-forecast/weather-forecast.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAA,EAAyB,SAAA,EAAW,KAAA,EAAM,MAAO,eAAA,CAAgB;AAE1E,OAAO,EAAE,YAAA,EAA8B,MAAO,0BAAA,CAA2B;AAIzE;IAAA;QACE,mBAAc,GAAG,IAAI,CAAC;IA+DxB,CAAC;IA7DC,sBAAI,0CAAI;aAAR,UAAS,KAAmB;YAC1B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC;YACT,CAAC;YACD,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACd,KAAK,YAAY,CAAC,IAAI;oBACpB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;oBAC3B,KAAK,CAAC;gBACR,KAAK,YAAY,CAAC,QAAQ;oBACxB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBAC5B,KAAK,CAAC;gBACR;oBACE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAChC,CAAC;QACH,CAAC;;;OAAA;IAGD,sBAAI,8CAAQ;aAOZ;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;aATD,UAAa,KAAiB;YAC5B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC;YACT,CAAC;YACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC;;;OAAA;IAMI,mCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,kBAAkB;oBAC5B,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,MAAM,EAAE;wBACN,2LAOQ;qBACT;oBACD,QAAQ,EAAE,oSAQT;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,uCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,uCAAc,GAA2C;QAChE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC7B,CAAC;IACF,+BAAC;CAhED,AAgEC,IAAA;SAhEY,wBAAwB","file":"weather-forecast.component.js","sourceRoot":"","sourcesContent":["import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Forecast } from '../../services/api/weather.api.service';\nimport { ForecastMode, WeatherSettings } from '../../weather.interfaces';\nimport preventExtensions = Reflect.preventExtensions;\n\n\nexport class WeatherForecastComponent {\n  isGridForecast = true;\n  \n  set mode(value: ForecastMode) {\n    if (!value) {\n      return;\n    }\n    switch (value) {\n      case ForecastMode.GRID:\n        this.isGridForecast = true;\n        break;\n      case ForecastMode.DETAILED:\n        this.isGridForecast = false;\n        break;\n      default:\n        this.isGridForecast = false;\n    }\n  }\n   settings: WeatherSettings;\n  \n  set forecast(value: Forecast[]) {\n    if (!value) {\n      return;\n    }\n    this._forecast = value;\n  }\n\n  get forecast(): Forecast[] {\n    return this._forecast;\n  }\n  private _forecast: Forecast[];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'weather-forecast',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [\n    `\n             :host {\n               margin-top: 1em;\n               display: block;\n               width: 100%;\n               box-sizing: border-box;\n             }\n           `\n  ],\n  template: `\n    <weather-forecast-simple-grid\n      *ngIf=\"isGridForecast\"\n      [forecast]=\"forecast\"></weather-forecast-simple-grid>\n    <weather-forecast-detailed\n      *ngIf=\"!isGridForecast\"\n      [settings]=\"settings\"\n      [forecast]=\"forecast\"></weather-forecast-detailed>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mode': [{ type: Input },],\n'settings': [{ type: Input },],\n'forecast': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}