{"version":3,"sources":["../../../src/components/weather-current-wind/weather-current-wind.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,uBAAuB,EACvB,KAAK,EAGN,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAE,gBAAA,EAAiB,MAAO,8DAAA,CAA+D;AAIhG;IAAA;IAwEA,CAAC;IAtEC,sBAAI,8CAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aAGD,UAAU,KAAK;YACb,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/C,CAAC;;;OANA;IAQD,sBAAI,4CAAG;aAAP;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aAGD,UAAQ,KAAa;YACnB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC;YACT,CAAC;YACD,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,QAAQ,GAAG,qBAAmB,IAAI,CAAC,IAAI,SAAM,CAAC;QACrD,CAAC;;;OATA;IAcD,oDAAc,GAAd,UAAe,KAAuB;QACpC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACd,KAAK,gBAAgB,CAAC,OAAO,CAAC;YAC9B,KAAK,gBAAgB,CAAC,MAAM;gBAC1B,MAAM,CAAC,KAAK,CAAC;YACf,KAAK,gBAAgB,CAAC,UAAU;gBAC9B,MAAM,CAAC,OAAO,CAAC;YACjB;gBACE,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;IACH,CAAC;IACI,sCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,sBAAsB;oBAChC,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,MAAM,EAAE;wBACN,yOAYD;qBACA;oBACD,QAAQ,EAAE,qFAGT;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,0CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,0CAAc,GAA2C;QAChE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC1B,CAAC;IACF,kCAAC;CAxED,AAwEC,IAAA;SAxEY,2BAA2B","file":"weather-current-wind.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { TemperatureScale } from '../weather-current-temperature/current-temperature.component';\nimport { WeatherSettings } from '../../weather.interfaces';\n\n\nexport class WeatherCurrentWindComponent {\n  unit: string;\n  get scale() {\n    return this._scale;\n  }\n\n  \n  set scale(value) {\n    this._scale = value;\n    this.unit = this.mapScaleToText(this._scale);\n  }\n  windIcon: string;\n  get deg(): number {\n    return this._deg;\n  }\n\n  \n  set deg(value: number) {\n    if (!value) {\n      return;\n    }\n    this._deg = value;\n    this.windIcon = `wi wi-wind from-${this._deg}-deg`;\n  }\n  private _deg: number;\n   speed: number;\n  private _scale: TemperatureScale;\n\n  mapScaleToText(scale: TemperatureScale): string {\n    switch (scale) {\n      case TemperatureScale.CELCIUS:\n      case TemperatureScale.KELVIN:\n        return 'm/s';\n      case TemperatureScale.FAHRENHEIT:\n        return 'mil/h';\n      default:\n        return '';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'weather-current-wind',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [\n    `\n    :host {\n      display: flex;\n      justify-content: space-around;\n      align-items: center;\n      font-size: 0.8em;\n      min-height: 1.3em;\n    }\n    i {\n      margin-left: 0.3em;\n      font-size: 1.6em;\n    }\n  `\n  ],\n  template: `\n    <span>Wind {{ speed }} {{ unit }}</span>\n   <i [class]=\"windIcon\"></i>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'scale': [{ type: Input },],\n'deg': [{ type: Input },],\n'speed': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}