{"version":3,"sources":["../../src/services/poling.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,MAAA,EAAO,MAAO,eAAA,CAAgB;AACnD,OAAO,8BAAA,CAA+B;AACtC,OAAO,yBAAA,CAA0B;AACjC,OAAO,4BAAA,CAA6B;AACpC,OAAO,6BAAA,CAA8B;AACrC,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAE7C,OAAO,EAAE,OAAA,EAAQ,MAAO,cAAA,CAAe;AAIvC;IACE,wBAAoB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;IAAG,CAAC;IAEpC,mFAAmF;IACnF,gCAAO,GAAP,UACE,SAA8B,EAC9B,SAAwB;QAF1B,iBA+BC;QA7BC,0BAAA,EAAA,gBAAwB;QAExB,IAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAC9B,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,UAAC,QAAqB;YACrD,IAAI,GAAiB,CAAC;YACtB,KAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBAC1B,IAAM,IAAI,GAAG,KAAI,CAAC,IAAI,CAAC;gBACvB,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC;oBACjE,IAAI,YAAC,MAAM;wBACT,IAAI,CAAC,GAAG,CAAC;4BACP,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACxB,CAAC,CAAC,CAAC;oBACL,CAAC;oBACD,KAAK,YAAC,GAAG;wBACP,IAAI,CAAC,GAAG,CAAC;4BACP,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACtB,CAAC,CAAC,CAAC;oBACL,CAAC;iBACF,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC;gBACL,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,GAAG,CAAC,WAAW,EAAE,CAAC;gBACpB,CAAC;YACH,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;IACjE,CAAC;IACI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,MAAM,GAAG;KACf,EAF6F,CAE7F,CAAC;IACF,qBAAC;CA3CD,AA2CC,IAAA;SA3CY,cAAc","file":"poling.service.js","sourceRoot":"","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/multicast';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\n\n\nexport class PoolingService {\n  constructor(private zone: NgZone) {}\n\n  // NOTE: Running the interval outside Angular ensures that e2e tests will not hang.\n  execute<T>(\n    operation: () => Observable<T>,\n    frequency: number = 1000\n  ): Observable<T> {\n    const subject = new Subject();\n    const source = Observable.create((observer: Observer<T>) => {\n      let sub: Subscription;\n      this.zone.runOutsideAngular(() => {\n        const zone = this.zone;\n        sub = Observable.interval(frequency).mergeMap(operation).subscribe({\n          next(result) {\n            zone.run(() => {\n              observer.next(result);\n            });\n          },\n          error(err) {\n            zone.run(() => {\n              observer.error(err);\n            });\n          }\n        });\n      });\n\n      return () => {\n        if (sub) {\n          sub.unsubscribe();\n        }\n      };\n    });\n\n    return source.multicast(subject).refCount().merge(operation());\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}