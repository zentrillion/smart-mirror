{"version":3,"sources":["../../../src/services/api/weather.api.service.ts"],"names":[],"mappings":"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","file":"weather.api.service.js","sourceRoot":"","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { Headers, Http, RequestOptions, URLSearchParams } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { PoolingService } from '../poling.service';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/first';\nimport { WeatherQueryParams } from '../../weather.interfaces';\n\n\nexport abstract class WeatherApiService {\n  poollingInterval = 60000 * 60;\n  constructor(\n    protected http: Http,\n    protected poolingService: PoolingService,\n     public apiConfig: WeatherApiConfig\n  ) {}\n\n  currentWeather(queryParams: WeatherQueryParams): Observable<CurrentWeather> {\n    return this.callApi(queryParams, '/weather').map(\n      this.mapCurrentWeatherResponse.bind(this)\n    );\n  }\n\n  forecast(queryParams: WeatherQueryParams): Observable<Forecast[]> {\n    return this.callApi(queryParams, '/forecast').map(\n      this.mapForecastResponse.bind(this)\n    );\n  }\n\n  protected callApi(\n    queryParams: WeatherQueryParams,\n    endpoint: string\n  ): Observable<any> {\n    const params = this.mapQueryParams(queryParams);\n    const requestOptions = this.getRequestOptions(params);\n    const apiCall: Observable<any> = this.http\n      .get(`${this.apiConfig.baseUrl}/${endpoint}`, requestOptions)\n      .map(resp => resp.json())\n      .filter(el => !!el);\n    return this.wrapWithPoll(apiCall);\n  }\n\n  protected setTokenKey(): string {\n    // Implement it in child service\n    return '';\n  }\n\n  protected mapQueryParams(params: WeatherQueryParams): any {\n    // Implement it in child service\n    return;\n  }\n\n  protected mapCurrentWeatherResponse(response: any): CurrentWeather {\n    // Implement it in child service\n    return <CurrentWeather>{};\n  }\n\n  protected mapForecastResponse(response: any): Forecast[] {\n    // Implement it in child service\n    return <Forecast[]>[];\n  }\n\n  protected mapResponseToIconUrl(response: any): string {\n    return '';\n  }\n  protected mapResponseToIconClass(response: any): string {\n    return '';\n  }\n\n  private wrapWithPoll(apiCall: Observable<any>) {\n    return this.poolingService.execute(() => apiCall, this.poollingInterval);\n  }\n\n  private getRequestOptions(queryParams: Object) {\n    return new RequestOptions({\n      headers: new Headers(),\n      params: this.getQueryParams(queryParams)\n    });\n  }\n\n  private getQueryParams(obj: { [key: string]: any }): URLSearchParams {\n    const queryParams = new URLSearchParams();\n    queryParams.set(this.setTokenKey(), this.apiConfig.key);\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        queryParams.set(key.toString(), obj[key]);\n      }\n    }\n    return queryParams;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: PoolingService, },\n{type: WeatherApiConfig, decorators: [{ type: Inject, args: ['WEATHER_CONFIG', ] }, ]},\n];\n}\n\nexport interface CurrentWeather {\n  location: string;\n  temp: number;\n  pressure?: number;\n  humidity?: number;\n  minTemp?: number;\n  maxTemp?: number;\n  sunrise?: number;\n  sunset?: number;\n  iconClass?: string;\n  iconUrl?: string;\n  description?: string;\n  wind?: {\n    deg: number;\n    speed: number;\n  };\n}\n\nexport interface Forecast extends CurrentWeather {\n  data: Date;\n}\n\nexport class WeatherApiConfig {\n  name: WeatherApiName = WeatherApiName.OPEN_WEATHER_MAP;\n  key = 'provide secret key';\n  baseUrl = 'http://api.openweathermap.org/data/2.5';\n}\n\nexport enum WeatherApiName {\n  OPEN_WEATHER_MAP = <any>'Open Weather Map'\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}